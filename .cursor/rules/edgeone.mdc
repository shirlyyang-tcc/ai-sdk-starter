---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
---
description: Guidelines and best practices for building EdgeOne Pages projects & sites, including edge functions, and real-world examples
globs: **/*.{ts,tsx,js,jsx,toml,json}
---

<ProviderContext version="1.0" provider="edgeone">
  ## General
  - the `.edgeone` folder is not for user code. It should be added to the .gitignore list
  - front end dev server and edge function dev server are two different servers.

  # Guidelines

  - There are 1 type of compute systems you can write code for:
    - Edge functions - usually used for code that must modify requests before hitting the server or modifying responses before returning to users.
  - Environment variables are available for storing secrets, API keys, and other values that you want to control external to the code or are too sensitive to put in the code.

  ### Technology Stack Description
  - Frontend framework: Next.js (must use SSG, i.e., Static Site Generation; SSR is not allowed)
  - Component library: shadcn/ui
  - Styles: It is recommended to use Tailwind CSS V4, document: https://tailwindcss.com/docs/installation/using-postcss
  - Type system: TypeScript
  - Edge functions: EdgeOne Functions, all API logic must be placed in the functions directory and follow EdgeOne specifications

  ### Syntax and Project Specifications
  1. Next.js Configuration
     - Only SSG (getStaticProps, getStaticPaths) is allowed; SSR (getServerSideProps) is prohibited.
       - next.config should add   `output: "export"` to ensure the project is SSG.
     - All pages and components must use TypeScript (.tsx).
     - Routing follows Next.js file routing conventions.
     - Static assets are placed in the public directory.
     - Next.js min version 15.3.1.
     - All components that imports "useState" need has `"use client";` at the beginning of the file.
  2. shadcn/ui Component Library
     - Components must be imported from @/components/ui or @/components.
     - Direct modification of components inside node_modules is prohibited; extend via custom components if needed.
     - Component styles must use Tailwind CSS.
  3. Code Style
     - TypeScript must be used, with complete type declarations.
     - Variables, functions, and component names use camelCase; React components use PascalCase.
     - Strictly use ES6+ syntax, prohibit var, prefer const.
     - Use Prettier for code formatting, recommended to use with ESLint.
     - File and directory names use lowercase and kebab-case.
  4. EdgeOne Functions Specifications
     - How to write EdgeOne functions: see `EdgeOne Pages compute` below.
     - You should auto generate local environments for local EdgeOne Functions: NEXT_PUBLIC_DEV=true, NEXT_PUBLIC_API_URL_DEV=http://localhost:8088/ and FRONT_END_URL_DEV=`http://localhost:${FRONTEND DEV SERVER PORT}/`
     - Front end request EdgeOne functions API with `fetch`.
       - When env.DEV equals true, fetch url format is `${env.VITE_API_URL_DEV}/path-to-api`
       - When env.DEV equals true, redirect url in EdgeOne functions is `${env.FRONT_END_URL_DEV}/path-to-redirect`
  5. Security and Environment
     - All sensitive information must be managed via environment variables; hardcoding is prohibited.
     - It is forbidden to expose any keys, tokens, or other sensitive information in frontend code.
  6. Language
     - Use English as default language when write code and comments.

  ## EdgeOne Pages compute

  - NEVER put any type of edge function in the public or publish directory
  - DO NOT change the default functions or edge functions directory unless explicitly asked to.
  - ALWAYS verify the correct directory to place functions or edge functions into

  ### Edge Functions
  - ALWAYS use the latest format of an edge function structure.
  - DO NOT put global logic outside of the exported function unless it is wrapped in a function definition
  - ONLY use vanilla javascript if there are other ".js" files in the functions directory.
  - ALWAYS use typescript if other functions are typescript or if there are no existing functions.
  - The first argument is a custom EdgeOne context object.
    - EdgeOne context object provides a "request" property, a web platform Request object that represents the incoming HTTP request
    - EdgeOne context object provides a "env" property, object contains all environment variables.
    - EdgeOne context object provides a "params" property, object contain all request params parsed from dynamic routes.
  - ONLY use `env.*` for interacting with environment variables in code.
  - Place function files in `YOUR_BASE_DIRECTORY/functions` or a subdirectory.
  - Edge functions **does not** support Server Side Rendering.
  - Edge functions use Node.js as runtime and should attempt to use built-in methods where possible. See the list of available web APIs to know which built-ins to use.
    - **Module Support**:  
      - Do not supports **Node.js built-in modules**
      - Supports **npm packages** (beta).  
    - **Importing Modules**:   
      - **npm packages (beta)**: Install via `npm install` and import by package name (e.g., `import _ from "lodash"`).  
      - Some npm packages with **native binaries** (e.g., Prisma) or **dynamic imports** (e.g., cowsay) may not work.
    - **Usage in Code**:  
      - Modules can now be imported by name:  
        ```javascript
        import { HTMLRewriter } from "html-rewriter";
        ```

  #### Examples of the latest Edge function structures
    - ```javascript
         const json = JSON.stringify({
              "code": 0,
              "message": "Hello World"
            });


        export function onRequest(context) {
          return new Response(json, {
            headers: {
              'content-type': 'text/html; charset=UTF-8',
              'x-edgefunctions-test': 'Welcome to use Pages Functions.',
            },
          });
        }
      ```


  #### Web APIs available in Edge Functions ONLY
  - console.*
  - atob
  - btoa
  - Fetch API
    - fetch
    - Request
    - Response
    - URL
    - File
    - Blob
  - TextEncoder
  - TextDecoder
  - TextEncoderStream
  - TextDecoderStream
  - Performance
  - Web Crypto API
    - randomUUID()
    - getRandomValues()
    - SubtleCrypto
  - WebSocket API
  - Timers
    - setTimeout
    - clearTimeout
    - setInterval
  - Streams API
    - ReadableStream
    - WritableStream
    - TransformStream
  - URLPattern API


  #### In-code function config and routing for Edge functions
  - Edge functions are configured with a path pattern and only paths matching those patterns will run the edge function
  - Edge functions use code file path as functions path.(e.g., `YOUR_BASE_DIRECTORY/functions/hello/index.js` file matches api path `/hello`, `YOUR_BASE_DIRECTORY/functions/hello/world.js` file matches api path `/hello/world`.)
  - Edge functions use `[param]` as file path to mark dynamic routes.(e.g., `YOUR_BASE_DIRECTORY/functions/hello/[name]` file matches all api paths like `/hello/Tom`.)
  

  #### Edge functions limitations
  - 20 MB (compressed) code size limit
  - 2048 MB per deployment memory limit
  - 50ms per request CPU execution time (excludes waiting time) 
  - 40 seconds Response header timeout
  - Be aware that multiple framework adapters may generate conflicting edge functions  

  ## Local Development
  - front end dev server and edge function dev server are two different servers.
    - Front end dev server start command: "npm run dev"
    - Edge functions dev server start command: "edgeone pages dev --fePort ${Front end dev server port}"
  - dev server start commands should be added to `package.json`
  - FRONT_END_URL_DEV and VITE_API_URL_DEV should be added to local .env file.
  - DEV=true should be added to local .env file.

</ProviderContext>